<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAMDAYAAAAAACoHAAAFgAAACgAAAAwAAAAYAAAAAEAGAAAAAAAABsAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACTk5MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACTk5NJSUkAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAADHx8c2NjY9PT0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyMjI8PDxfX18AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApKSlCQkJra2uQ
        kJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB5eXkAAACSkpIAAAAAAAAAAAAAAAAA
        AAAAAAAAAACPj480NDRKSkptbW2Li4u+vr4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACXl5dUVFRJSUkAAAB9
        fX1YWFgAAAAAAAAAAAAAAACVlZUAAAAAAAAAAAAAAAA+Pj5JSUmCgoKoqKg6OjqMjIwAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAABBQUFYWFhLS0tRUVHIyMiRkZFISEgxMTEuLi4xMTEsLCwpKSkoKCgpKSk0NDQ8PDxPT09w
        cHCwsLBoaGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABdXV1YWFg5OTkjIyOvr698fHx+fn62trarq6szMzM+
        Pj42NjY4ODg7Ozs8PDxKSkpRUVFZWVmlpaVXV1cAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgYGBUVFQ7Ozse
        Hh69vb1/f39nZ2f29vb29vYAAABycnKCgoKmpqZOTk5KSkpHR0ddXV1oaGhjY2NSUlIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAA5OTlDQ0McHBwXFxcVFRWVlZUtLS3p6enn5+fx8fHs7OzZ2dkAAACysrKLi4uWlpaQ
        kJClpaWsrKxUVFRTU1NPT08AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABMTEwoKCgsLCwpKSkDAwN6enp5eXnKysra
        2trr6+v5+fkAAAAAAAAAAADz8/OXl5eoqKijo6OlpaVSUlJRUVFWVlZBQUEAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4ODgZ
        GRkwMDAFBQUODg4dHR1BQUHf39+pqaltbW3V1dUAAAD29vb39/f4+Pj5+fn5+fnMzMympqaqqqqmpqZg
        YGBQUFBWVlZISEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAABxcXEyMjJYWFgICAgcHBwUFBRYWFgyMjJ2dnYfHx/g4OC0tLS9vb3k5OTr
        6+vv7+/z8/P29vYAAADy8vKYmJiysrJ7e3tYWFhgYGBfX19ISEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhISFJSUkoKCgEBAQbGxsTExMw
        MDBeXl5AQEBBQUEnJydAQEDDw8PNzc2GhoadnZ2enp7FxcXw8PDz8/Pb29vR0dGCgoLQ0NBvb29mZmal
        paUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAA4ODhGRkYGBgYGBgYtLS0jIyM0NDQxMTEnJyc/Pz8jIyMWFhZERER/f39DQ0PCwsKpqakEBAQ3Nzde
        Xl6IiIi3t7fd3d3x8fHi4uKDg4Ojo6MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABOTk5BQUEkABI1NTVDQ0NRUVEcHBwvLy8TExMqKiolJSUH
        BweUlJQcHBw6Ojp5eXmNjY3Hx8fa2tpkZGRtbW2IiIjFxcXq6urMzMwAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABTU1OJJWZaAEJ9EWId
        CBVkZGQVFRUeHh4lJSVhYWEnJycoKChZWVkuLi4fHx8WFhYwMDA7OzthYWHGxsZ9fX3h4eHBwcG7u7v0
        9PSampoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAABNSEtoAEKFAXfOR6vISrZNSkyfKxhTU1M6Ojp2dnYsLCxeXl4wMDARERFISEhycnIeHh4t
        LS1SUlJgYGA5OTlDQ0N3d3fX19eGhoYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZhJCOIH6QDJHRXa7DT63ygZ3xflqcEQHIyMi2oaEC
        AgLNzc1RUVFkZGRmZmY7OzsoKChMTEw3NzdTU1MXFxciIiJZWVlfX18AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACbg5NqDFF/HGqA
        C4fdX77Xb6Djh3fykmWdMhvCrqx+GADFxcVSUlIWFhalpaWJiYliYmJiYmJSUlJMTEwxMTEkJCRTU1NJ
        SUkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAABKAC9pAFOJB3M4ACyQRXFkFU9rAACQHQTPsYv3pZrWro9rzo9Ohjt42XVagUyXqrJj
        a6i7u7teXl5hYWFCQkJNTU0xMTFsbGwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkClSaHod8AG1FADmHAHDORXtsGwDebVngxaeO
        CgL/5LqL0pfR4rOk8bVzommN6tNe4P+j7P9Gob/K6v9FRUVPT09+fn51dXUAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACdhph+GGmwK55h
        AE6DBHZ2AF2CADWBMADrU0PfXDyoLRSzaE0zQxQhdjwPKADO4cLD5MyL8P9+3//f//rn+/+vnOt4VORN
        SkxJSUkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAABVAD+ZDZesHZS6LqLUUs2IFYOnBxrSPyHBIQvvX0TOIgjIj1IejCxFgDk4gEvk7sUA
        AACy//aY//3U+f+w/+bStsT24//gxP1MNLUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiD0iTE5i3H62GAG+WFI+dE5W9LmjsUDe2NwDCORqs
        KQfMPxmmnmJL2HoxlTkUawgxvU94y8CB3P/e4v8S2Ozn/P/e3vrN4PPs/OQAAABoZp4AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACPZ4d2HmunG6ifC5q4
        L5S7LLOfHo/LNoO6MxDFKwDBMiSgGwDCLQnfilZa2342gCtDrlRJ7ouIxJgEy+M51f9J5f+xjcen0f/e
        6tz/9u707v9gUq9dUW4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAABYDU6rJJ69I6OwGaywKZe1NKmtM7XUPZbYUSXbSSjYVTPaPSHHVDXTPx2bvnMVgCMadxkDii9N
        0nwSmXN57/8Aw/Agvf8/3/9ttv8LCW+rqP+upv/T0vIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAABYCUynHZrDM7SyGquzKaCuJ6qkJKWwHqXAGKPBOBzGOALONx3OQRjE
        Qxz5SiirVB8gchQ5s08XgyA2uFdAs1smsqJ04v8RxP840P8GwP9eo/8QDc4ABrAAA8UKAIeCebEAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACUKIeqKJ3BJrWwK6usKqWqLKWyJqKz
        JrHBKam5KlnOWArTPijTNSjMOizXSRnXQBy4Xyg+pEhEs1FQwWMvm0IZki8v0sNw8/8Z0P9D3P9u7f9P
        qv8nDuIAEK0AFbkAAb8XC2YAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAC4I6C0LaenK5+kKLGoHrKyIby/KnvCPS3WRxbmPxu8SCTfOhzKQSjFQRjITxpOmC0yqD0YkiMip0YW
        tWwhnVAe8P9j5P8x3P9P2/8A0O4GTvkAA7IACqUAEawACs0cEWEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACvK7e0K6i6KJ2/MHO+NTjRSBPXSxbRSBPPQifVRR/ETiTs
        QBrNSRoxjC4mlTMXq1EhrUk2u2A1z30ErIEUyv9B0v861f9N1f9Mzf8AFYMACqsADdYACqcAAKsWEmMA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC9Lom5MlvAPDPK
        RyXQRiDVQx/SOS/RQSPQRx3nPx7mRxuVbywkpkUsoEIhqEYjs000skwsvHJy//E10v862v9M0/8r4/8+
        2f8AIX8AGbkAB8gADsEHEMsBACcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADVRiXMRiTZQSHMQSfARinMQSfNRCXBUCTxORdekjolpkkuoUkfqEMmqFYWvFlD
        x2Q18eQ02v870v8q1f9IzP8z2P9m7P8KEOQAEMAAF7EAFconMOKIiZQAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADURCnSQifWPybgQh/dQR+sVyqEfzUP
        sUlCnT8dr08UtkwisUUksEwbvWMKsqYh1f850v83zv8w0f8p1v81z/8AP54OA+UAHbwAEsABAKw4RM0A
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADOSCbbRiXbRya1YyiFgztHlkEwpkQmq0oTtlMjsFIqs1sltF0UsW1O/P9D1P830f800P841f8y0P9A
        2v8AMpAAFLkAG7ACAMYADcoFAJUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABxiTlMlzxBn0E1pkgur0kqtkkZs0sjqkUxs288y3Mv5c41
        3/871v8z0v8t1P8zz/823v8A3/oAKIgAEcoAE7oAEroAE6AAF70EAXMAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqq04krVEirlYo
        sVklt2Ajt2IkwVkHtJkv1v881/8nzf8wyv84yv8v1v811f82y/+Asv8AHscAEZ8AEbQAF7AAD8cICLis
        rLwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAArsFU4sWEprWErwmAGrmgu3K5T3/811f8y2f84z/840v840/8d0v8c1/9f3v8A
        OacAD8EAHaoAEbgAFa8ACc0FAqEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGq3o89+hP7v861v9Ez/880v89zP8v
        0P8y1v81z/8f2P8X4v8AX8UAHq8AD7oAE7EAE7QAG60AFcgAE9wAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAApyP81z/870f880/800P81z/9Fxv8t0P8h4v9exv8ALpMABrAAC70ACLUAG6YAGbEAFrgADtBnaLMA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3z/8w0P8x1P83z/8k0P9Izv8A4fdTvP8AGJIAGbkAF7AA
        GKcAHqEAGbIAEbgAFdIJAK4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf5P8s2v9K2v81
        qv8AIYAAD7kAGqwABMAAD7YAFa4AE6cAA7IADK0AANJBS84AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAK6UAHs0ABLcHAMEADLcAGK0AELEAGKkAGK0AFLQACb4AFLCqrsMAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABrMAFrMAH6cAIaQAHKgAEqoAErAA
        DakABNkAD5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAEK8AGbkAHKQAJbsAFK0ABsp/f6kAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARD9ICC4eCh7cAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAD///////4AAP///////AAA///////4AAD///////gAAP//////8AAA/////1/A
        AAD////ie8AAAP///8AAAwAA////gAAHAAD///8AQA8AAP///gAQBwAA///+ADgDAAD///wAQAEAAP//
        +AABAAAA///4AAAAAAD///AAAAEAAP//8AAABwAA///gAAAHAAD//8AAAB8AAP//gAAAfwAA//8AAAD/
        AAD//gAAAf8AAP/8AAAD/wAA//AAAAf/AAD/4AAQD/8AAP+AAAAv/wAA/gAAAA//AAD4AAAAP/8AAMAA
        AAA//wAAAAAAAH//AAAAAAAA//8AAAAAAAH//wAAAAAAA///AAAAAAAH//8AAAAAAB///wAAAAAAP///
        AAAAAAB///8AAAAAAP///wAAAAAD////AAAAAA////8AAAAAH////wAAAAB/////AAAAAf////8AAAAH
        /////wAAAD//////AAAB//////8AAB///////wAA////////AAA=
</value>
  </data>
</root>